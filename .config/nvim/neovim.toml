[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = '!has("win32")'
on_event = ['BufRead', 'CursorHold']
on_ft = ['help']
hook_post_update = 'TSUpdate'
lua_source = '''
  require('nvim-treesitter.configs').setup {
    ensure_installed = 'all',
    ignore_install = {
        'hoon',
    },
    sync_install = true,
    additional_vim_regex_highlighting = false,
    highlight = {
      enable = true,
    },
    indent = {
      enable = true,
    },
  }
'''

[[plugins]]
repo = 'williamboman/mason.nvim'
on_event = 'FileType'
lua_source = '''
  require('mason').setup()
'''

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'mason.nvim'
lua_source = '''
  require('mason-lspconfig').setup_handlers({
    function(server_name)
      local nvim_lsp = require('lspconfig')
      local opts = {}

      if server_name == 'vtsls' then
        -- NOTE: Must be node directory
        if vim.fn.findfile('package.json', '.;') == '' then
          return
        end

        opts.root_dir = nvim_lsp.util.root_pattern('package.json')
      elseif server_name == 'denols' then
        -- NOTE: Disable denols.  It is too slow.
        -- Disable nest.land imports
        -- https://github.com/neovim/nvim-lspconfig/pull/2793
        opts = {
          settings = {
            deno = {
              suggest = {
                imports = {
                  autoDiscover = false,
                  hosts = {
                    ['https://x.nest.land'] = false,
                  },
                },
              },
            },
          },
        }
        return
      elseif server_name == 'solargraph' then
        opts.single_file_support = true
        opts.capabilities = {}
      elseif server_name == 'lua_ls' then
        opts = {
          settings = {
            Lua = {
              runtime = {
                -- Tell the language server which version of Lua you're using
                -- (most likely LuaJIT in the case of Neovim)
                version = 'LuaJIT',
              },
              diagnostics = {
                -- Get the language server to recognize the `vim` global
                globals = {
                  'vim',
                  'require',
                },
              },
              workspace = {
                -- Make the server aware of Neovim runtime files
                library = vim.api.nvim_get_runtime_file("", true),
              },
              -- Do not send telemetry data
              telemetry = {
                enable = false,
              },
            },
          },
        }
      end

      nvim_lsp[server_name].setup(opts)
    end
  })
  require("mason-lspconfig").setup()
'''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = 'mason-lspconfig.nvim'
lua_source = '''
  vim.lsp.handlers['textDocument/publishDiagnostics'] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, {
      update_in_insert = false,
      virtual_text = {
        format = function(diagnostic)
          return string.format(
            '%s (%s: %s)',
            diagnostic.message,
            diagnostic.source,
            diagnostic.code
          )
        end
      },
  })
'''

[[plugins]]
repo = 'atusy/tsnode-marker.nvim'
depends = 'nvim-treesitter'
on_ft = 'markdown'
lua_source = '''
  vim.api.nvim_create_autocmd('FileType', {
    group = vim.api.nvim_create_augroup('tsnode-marker-markdown', {}),
    pattern = 'markdown',
    callback = function(ctx)
      require('tsnode-marker').set_automark(ctx.buf, {
        target = { 'code_fence_content' }, -- list of target node types
        hl_group = 'CursorLine', -- highlight group
      })
    end,
  })
'''

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'

[[plugins]]
repo = 'saecki/crates.nvim'
on_path = 'Cargo.toml'
lua_source = '''
  require("crates").setup {
      text = {
          loading = "  Loading...",
          version = "  %s",
          prerelease = "  %s",
          yanked = "  %s yanked",
          nomatch = "  Not found",
          upgrade = "  %s",
          error = "  Error fetching crate",
      },
      popup = {
          text = {
              title = "# %s",
              pill_left = "",
              pill_right = "",
              created_label = "created        ",
              updated_label = "updated        ",
              downloads_label = "downloads      ",
              homepage_label = "homepage       ",
              repository_label = "repository     ",
              documentation_label = "documentation  ",
              crates_io_label = "crates.io      ",
              lib_rs_label = "lib.rs         ",
              categories_label = "categories     ",
              keywords_label = "keywords       ",
              version = "%s",
              prerelease = "%s pre-release",
              yanked = "%s yanked",
              enabled = "* s",
              transitive = "~ s",
              normal_dependencies_title = "  Dependencies",
              build_dependencies_title = "  Build dependencies",
              dev_dependencies_title = "  Dev dependencies",
              optional = "? %s",
              loading = " ...",
          },
      },
      completion = {
          text = {
              prerelease = " pre-release ",
              yanked = " yanked ",
          },
      },
  }
'''

